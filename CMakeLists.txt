CMAKE_MINIMUM_REQUIRED(VERSION 3.4)
PROJECT(GETBUILDINFO)
SET(SRC_LIST getBuildInfo.cpp)
MESSAGE(STATUS "BINARY DIR: " ${TEST_BINARY_DIR})
MESSAGE(STATUS "SOURCE DIR: " ${TEST_SOURCE_DIR})
MESSAGE(STATUS "CXX_COMPILER: " ${CMAKE_CXX_COMPILER})

## set git info
EXEC_PROGRAM(git ARGS "status > /dev/null" RETURN_VALUE GIT_STATUS_RVALUE)
IF (GIT_STATUS_RVALUE EQUAL 0)
  EXEC_PROGRAM(git ARGS "log | head -n 1 | cut  -f 2 -d ' '" OUTPUT_VARIABLE GIT_REVISION)
  EXEC_PROGRAM(git ARGS "remote -v |head -1 |cut -d ' ' -f 1 |cut -f 2" OUTPUT_VARIABLE GIT_REPOS)
  SET(GIT_INFO ${GIT_REPOS}@${GIT_REVISION})
  MESSAGE(STATUS "set git info => " ${GIT_INFO})
ELSE (GIT_STATUS_RVALUE EQUAL 0)
  MESSAGE(STATUS ${CMAKE_CURRENT_SOURCE_DIR} " doesn't belong to any git repository")
  SET(GIT_INFO "nil")
ENDIF (GIT_STATUS_RVALUE EQUAL 0)
ADD_DEFINITIONS(-DGIT_INFO=\"${GIT_INFO}\")

## set build info
ADD_DEFINITIONS(-DBUILD_TOOL=\"${CMAKE_CXX_COMPILER_ID}@${CMAKE_CXX_COMPILER_VERSION}\")
ADD_DEFINITIONS(-DBUILD_SYSTEM=\"${CMAKE_SYSTEM}\")
ADD_DEFINITIONS(-DBUILD_PATH=\"${CMAKE_CURRENT_SOURCE_DIR}\")

ADD_EXECUTABLE(getBuildInfo ${SRC_LIST})
